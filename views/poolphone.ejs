<!DOCTYPE HTML>
<html>
<style>
body{margin:0px;
 cursor: none; }
.canvas{
	width: 100%;
	height: 100%;
}
</style>

<body>

</body>
<script>
mobile = true;
</script>





<!-- This is the 'compute shader' for the water heightmap: -->
		<script id="heightmapFragmentShader" type="x-shader/x-fragment">
			const float pi = 3.14159;
			uniform float waterHeight;
			uniform float time;
			const int numWaves = 8;
			uniform float amplitude[8];
			uniform float wavelength[8];
			uniform float speed[8];
			uniform vec2 direction[8];

			

			void main()	{
				
				float x = gl_FragCoord.x;
				float y = gl_FragCoord.y;
				
				float height = 0.0;
			    for (int i = 0; i < numWaves; i++){
			        float frequency = 2.0*pi/wavelength[i];
				    float phase = speed[i] * frequency;
				    float theta = dot(direction[i], vec2(x, y));
				    height += amplitude[i] * sin(theta * frequency + time * phase);
			    }

				gl_FragColor = vec4(height);
			}
		</script>



		<!-- This is the water visualization shader, copied from the MeshPhongMaterial and modified: -->
		<script id="waterVertexShader" type="x-shader/x-vertex">
			#define PHONG
			#define USE_ENVMAP
			uniform sampler2D heightmap;
			uniform mat4 textureMatrixReflect;
			uniform mat4 textureMatrixRefract;
			varying vec2 vuv;
			varying vec3 vViewPosition;
			varying vec4 textLKPReflect;
			varying vec4 textLKPRefract;
			#ifndef FLAT_SHADED
				varying vec3 vNormal;
			#endif
			#include <common>
			#include <uv_pars_vertex>
			#include <uv2_pars_vertex>
			#include <displacementmap_pars_vertex>
			#include <envmap_pars_vertex>
			#include <color_pars_vertex>
			#include <morphtarget_pars_vertex>
			#include <skinning_pars_vertex>
			#include <shadowmap_pars_vertex>
			#include <logdepthbuf_pars_vertex>
			#include <clipping_planes_pars_vertex>
			void main() {
				

				vec2 cellSize = vec2( 1.0 / WIDTH, 1.0 / WIDTH );
				#include <uv_vertex>
				#include <uv2_vertex>
				#include <color_vertex>
				textLKPReflect = textureMatrixReflect * vec4( position, 1.0 );
				textLKPRefract = textureMatrixRefract * vec4( position, 1.0 );
				vuv = uv;
				// # include <beginnormal_vertex>
				// Compute normal from heightmap
				vec3 objectNormal = vec3(
					( texture2D( heightmap, uv + vec2( - cellSize.x, 0 ) ).x - texture2D( heightmap, uv + vec2( cellSize.x, 0 ) ).x ) * WIDTH / BOUNDS,
					( texture2D( heightmap, uv + vec2( 0, - cellSize.y ) ).x - texture2D( heightmap, uv + vec2( 0, cellSize.y ) ).x ) * WIDTH / BOUNDS,
					1.0 );
				//<beginnormal_vertex>
				#include <morphnormal_vertex>
				#include <skinbase_vertex>
				#include <skinnormal_vertex>
				#include <defaultnormal_vertex>
			#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED
				vNormal = normalize( transformedNormal );
			#endif
				//# include <begin_vertex>
				float heightValue = texture2D( heightmap, uv ).x;
				vec3 transformed = vec3( position.x, position.y, heightValue );
				//<begin_vertex>
				#include <morphtarget_vertex>
				#include <skinning_vertex>
				#include <displacementmap_vertex>
				#include <project_vertex>
				#include <logdepthbuf_vertex>
				#include <clipping_planes_vertex>
				vViewPosition = - mvPosition.xyz;
				#include <worldpos_vertex>
				#include <envmap_vertex>
				#include <shadowmap_vertex>
			}
		</script>
		<script id="waterFragmentShader" type="x-shader/x-vertex">

			#define PHONG
			#define USE_ENVMAP
			#define ENVMAP_TYPE_CUBE

			uniform vec3 diffuse;
			uniform vec3 emissive;
			uniform vec3 specular;
			uniform float shininess;
			uniform float opacity;
			uniform vec3 camPos;

			uniform sampler2D reflectTexture;
			uniform sampler2D refractTexture;
			uniform mat4 textureMatrix;
			varying vec4 textLKPReflect;
			varying vec4 textLKPRefract;
			varying vec2 vuv;
			
			#include <common>
			#include <packing>
			#include <dithering_pars_fragment>
			#include <color_pars_fragment>
			#include <uv_pars_fragment>
			#include <uv2_pars_fragment>
			#include <map_pars_fragment>
			#include <alphamap_pars_fragment>
			#include <aomap_pars_fragment>
			#include <lightmap_pars_fragment>
			#include <emissivemap_pars_fragment>

			#include <envmap_pars_fragment>

			#include <gradientmap_pars_fragment>
			#include <fog_pars_fragment>
			#include <bsdfs>
			#include <lights_pars>
			#include <lights_phong_pars_fragment>
			#include <shadowmap_pars_fragment>
			#include <bumpmap_pars_fragment>
			#include <normalmap_pars_fragment>
			#include <specularmap_pars_fragment>
			#include <logdepthbuf_pars_fragment>
			#include <clipping_planes_pars_fragment>
			
			void main() {

				#include <clipping_planes_fragment>

				vec4 diffuseColor = vec4( diffuse, opacity );
				ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
				vec3 totalEmissiveRadiance = emissive;

				#include <logdepthbuf_fragment>
				#include <map_fragment>
				#include <color_fragment>
				#include <alphamap_fragment>
				#include <alphatest_fragment>
				#include <specularmap_fragment>
				#include <normal_fragment>
				#include <emissivemap_fragment>

				// accumulation
				#include <lights_phong_fragment>
				#include <lights_template>

				// modulation
				#include <aomap_fragment>

				
				vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;

				/*
				//#include <envmap_fragment>
				vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );

				// Transforming Normal Vectors with the Inverse Transformation
				vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );

				vec3 vReflect = reflect( cameraToVertex, worldNormal );

		

				vec3 vRefract = refract( cameraToVertex, worldNormal, 	0.95);


				vec4 envColor1 = textureCube( envMap,vec3( vReflect.xyz));
				vec4 envColor2 = textureCube( envMap,vec3( vRefract.xyz));



				

				//outgoingLight 

				



				vec4 color = envColor1 * (1.0 -d)  + envColor2 * (d);

				gl_FragColor = vec4( color.xyz * 0.6+ outgoingLight.xyz * 0.4, 1.0 );

				//gl_FragColor += envColor / 2.0
				*/

				vec3 dir = camPos-  vWorldPosition;
				dir = normalize(dir); 
				float d = 1.0 - abs(dot(dir, normal));


				d = 1.0 - pow(d, 1.0);


				vec4 reflectBase = texture2DProj( reflectTexture, textLKPReflect );
				vec4 refractBase = texture2DProj( refractTexture, textLKPRefract );

				vec4 val = reflectBase * 1.0 * (1.0-d) +  4.0 * refractBase * (d);
				
				gl_FragColor = vec4( val.xyz * 0.2 + outgoingLight * 0.8, 1.0 );
				/*		
				/*		
				#include <tonemapping_fragment>
				#include <encodings_fragment>
				#include <fog_fragment>
				#include <premultiplied_alpha_fragment>
				#include <dithering_fragment>
				*/
			}
		</script>
		<!-- This is the water visualization shader, copied from the MeshPhongMaterial and modified: -->
		<script id="causticsVertexShader" type="x-shader/x-vertex">
			varying vec2 vuv;

			void main() {
				vuv = uv;
				gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
			}
			
		</script>
		<script id="causticsFragmentShader" type="x-shader/x-vertex">
		varying vec2 vuv;
		uniform sampler2D map;
		void main() {

			vec4 color = texture2D(map, vuv.xy * 2.0);
			gl_FragColor = vec4( color.r );
		}
		</script>


<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.2.6/jquery.min.js"></script>


<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js"></script>
<script src = "/general/three.js"></script>

<script src="/general/input.js"></script>

<script src="/general/controls.js"></script>
<script src="/general/vrControls.js"></script>
<script src = "/pool/Objects/player2.js"></script>
<script src = "/pool/Objects/BeachBall.js"></script>
<script src = "/pool/Objects/PoolWorld.js"></script>
<script src = "/pool/Objects/reflector.js"></script>
<script src = "/pool/Objects/refractor.js"></script>
<script src = "/pool/Objects/water.js"></script>

<script src="/general/SimplexNoise.js"></script>
<script src="/general/stereo.js"></script>

<script src="/general/GPUComputationRenderer.js"></script>


<script src = "/pool/js/poolScene.js"></script>
<script type="text/javascript" src="/general/cannon.js"></script>

<script
  src="https://code.jquery.com/jquery-3.2.1.js"
  integrity="sha256-DZAnKJ/6XZ9si04Hgrsxu/8s717jcIzLy3oi35EouyE="
  crossorigin="anonymous"></script>

<script src="/ballcollisions/socketPhoneCollisions.js"></script>




</html>